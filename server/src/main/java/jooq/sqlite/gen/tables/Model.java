/**
 * This class is generated by jOOQ
 */
package jooq.sqlite.gen.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.sqlite.gen.DefaultSchema;
import jooq.sqlite.gen.Keys;
import jooq.sqlite.gen.tables.records.ModelRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Model extends TableImpl<ModelRecord> {

    private static final long serialVersionUID = 1055241505;

    /**
     * The reference instance of <code>Model</code>
     */
    public static final Model MODEL = new Model();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelRecord> getRecordType() {
        return ModelRecord.class;
    }

    /**
     * The column <code>Model.id</code>.
     */
    public final TableField<ModelRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Model.modelType</code>.
     */
    public final TableField<ModelRecord, String> MODELTYPE = createField("modelType", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Model.tag</code>.
     */
    public final TableField<ModelRecord, String> TAG = createField("tag", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>Model.experimentRun</code>.
     */
    public final TableField<ModelRecord, Integer> EXPERIMENTRUN = createField("experimentRun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Model.filepath</code>.
     */
    public final TableField<ModelRecord, String> FILEPATH = createField("filepath", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>Model</code> table reference
     */
    public Model() {
        this("Model", null);
    }

    /**
     * Create an aliased <code>Model</code> table reference
     */
    public Model(String alias) {
        this(alias, MODEL);
    }

    private Model(String alias, Table<ModelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Model(String alias, Table<ModelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ModelRecord> getPrimaryKey() {
        return Keys.PK_MODEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ModelRecord>> getKeys() {
        return Arrays.<UniqueKey<ModelRecord>>asList(Keys.PK_MODEL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ModelRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModelRecord, ?>>asList(Keys.FK_MODEL_EXPERIMENTRUN_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Model as(String alias) {
        return new Model(alias, this);
    }

    /**
     * Rename this table
     */
    public Model rename(String name) {
        return new Model(name, null);
    }
}
