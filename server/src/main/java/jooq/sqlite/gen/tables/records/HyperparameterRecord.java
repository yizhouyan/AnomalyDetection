/**
 * This class is generated by jOOQ
 */
package jooq.sqlite.gen.tables.records;


import javax.annotation.Generated;

import jooq.sqlite.gen.tables.Hyperparameter;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HyperparameterRecord extends UpdatableRecordImpl<HyperparameterRecord> implements Record6<Integer, Integer, String, String, String, Integer> {

    private static final long serialVersionUID = -561910659;

    /**
     * Setter for <code>HyperParameter.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>HyperParameter.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>HyperParameter.spec</code>.
     */
    public void setSpec(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>HyperParameter.spec</code>.
     */
    public Integer getSpec() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>HyperParameter.paramName</code>.
     */
    public void setParamname(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>HyperParameter.paramName</code>.
     */
    public String getParamname() {
        return (String) get(2);
    }

    /**
     * Setter for <code>HyperParameter.paramType</code>.
     */
    public void setParamtype(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>HyperParameter.paramType</code>.
     */
    public String getParamtype() {
        return (String) get(3);
    }

    /**
     * Setter for <code>HyperParameter.paramValue</code>.
     */
    public void setParamvalue(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>HyperParameter.paramValue</code>.
     */
    public String getParamvalue() {
        return (String) get(4);
    }

    /**
     * Setter for <code>HyperParameter.experimentRun</code>.
     */
    public void setExperimentrun(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>HyperParameter.experimentRun</code>.
     */
    public Integer getExperimentrun() {
        return (Integer) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, Integer, String, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, Integer, String, String, String, Integer> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Hyperparameter.HYPERPARAMETER.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Hyperparameter.HYPERPARAMETER.SPEC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Hyperparameter.HYPERPARAMETER.PARAMNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Hyperparameter.HYPERPARAMETER.PARAMTYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Hyperparameter.HYPERPARAMETER.PARAMVALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return Hyperparameter.HYPERPARAMETER.EXPERIMENTRUN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getSpec();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getParamname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getParamtype();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getParamvalue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getExperimentrun();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperparameterRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperparameterRecord value2(Integer value) {
        setSpec(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperparameterRecord value3(String value) {
        setParamname(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperparameterRecord value4(String value) {
        setParamtype(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperparameterRecord value5(String value) {
        setParamvalue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperparameterRecord value6(Integer value) {
        setExperimentrun(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HyperparameterRecord values(Integer value1, Integer value2, String value3, String value4, String value5, Integer value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HyperparameterRecord
     */
    public HyperparameterRecord() {
        super(Hyperparameter.HYPERPARAMETER);
    }

    /**
     * Create a detached, initialised HyperparameterRecord
     */
    public HyperparameterRecord(Integer id, Integer spec, String paramname, String paramtype, String paramvalue, Integer experimentrun) {
        super(Hyperparameter.HYPERPARAMETER);

        set(0, id);
        set(1, spec);
        set(2, paramname);
        set(3, paramtype);
        set(4, paramvalue);
        set(5, experimentrun);
    }
}
