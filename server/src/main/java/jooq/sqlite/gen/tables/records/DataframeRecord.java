/**
 * This class is generated by jOOQ
 */
package jooq.sqlite.gen.tables.records;


import javax.annotation.Generated;

import jooq.sqlite.gen.tables.Dataframe;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataframeRecord extends UpdatableRecordImpl<DataframeRecord> implements Record4<Integer, String, Integer, String> {

    private static final long serialVersionUID = 438987878;

    /**
     * Setter for <code>DataFrame.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>DataFrame.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>DataFrame.tag</code>.
     */
    public void setTag(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>DataFrame.tag</code>.
     */
    public String getTag() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DataFrame.experimentRun</code>.
     */
    public void setExperimentrun(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>DataFrame.experimentRun</code>.
     */
    public Integer getExperimentrun() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>DataFrame.filepath</code>.
     */
    public void setFilepath(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>DataFrame.filepath</code>.
     */
    public String getFilepath() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Integer, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Dataframe.DATAFRAME.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Dataframe.DATAFRAME.TAG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Dataframe.DATAFRAME.EXPERIMENTRUN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Dataframe.DATAFRAME.FILEPATH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getTag();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getExperimentrun();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getFilepath();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataframeRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataframeRecord value2(String value) {
        setTag(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataframeRecord value3(Integer value) {
        setExperimentrun(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataframeRecord value4(String value) {
        setFilepath(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataframeRecord values(Integer value1, String value2, Integer value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DataframeRecord
     */
    public DataframeRecord() {
        super(Dataframe.DATAFRAME);
    }

    /**
     * Create a detached, initialised DataframeRecord
     */
    public DataframeRecord(Integer id, String tag, Integer experimentrun, String filepath) {
        super(Dataframe.DATAFRAME);

        set(0, id);
        set(1, tag);
        set(2, experimentrun);
        set(3, filepath);
    }
}
